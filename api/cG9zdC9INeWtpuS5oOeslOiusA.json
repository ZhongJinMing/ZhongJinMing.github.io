{"title":"H5学习笔记","date":"2019-08-24T07:04:41.000Z","link":"post/H5学习笔记","tags":["html"],"categories":["html"],"updated":"2019-08-24T08:57:00.621Z","content":"<h2 id=\"一、语法\">一、语法<a href=\"post/H5学习笔记#一、语法\"></a></h2><ol>\n<li><strong>undefined</strong>是一个尚未赋值的变量的值</li>\n<li>删除数组元素的方法：<br>将该索引的数组元素设置为<code>null</code>;<br>使用函数<code>splice</code>，所删除元素后面的所有元素的索引都减1;</li>\n<li><code>null</code>表示这个变量有一个空值</li>\n<li><code>Math.random</code>会返回一个介于0和1的浮点数（但是不会为1）</li>\n<li><code>Math.floor</code>把一个浮点数小数点后面的所有位去除，把它转换为一个整数</li>\n<li>文本输入域可以包含一个空串””</li>\n<li><code>attribute</code>和<code>property</code>的区别</li>\n<li>如果注册了一个按钮点击事件处理程序，点击这个按钮时就会调用这个函数</li>\n</ol>\n<h2 id=\"二、Javascript函数和对象\">二、Javascript函数和对象<a href=\"post/H5学习笔记#二、Javascript函数和对象\"></a></h2><ol>\n<li><p>函数会为你完成实例化变量的全部工作，所以你不需要在形参名前面加<code>var</code>关键字</p>\n</li>\n<li><p>如果没有一个<code>return</code>语句，这样的函数会返回<code>undefined</code></p>\n</li>\n<li><p>要尽可能减少或消除全局变量</p>\n</li>\n<li><p>如果不同文件中有两个同名的函数，将使用浏览器最后看到的那个函数</p>\n</li>\n<li><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在这里将一个匿名函数赋值给了变量f</span></span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>利用点操作符(.)可以访问一个对象的属性。一般来讲，这种记法比<code>[&quot;string&quot;]</code>记法更易读</p>\n</li>\n<li><p><code>delete</code>可删除一个属性</p>\n</li>\n<li><p>根据约定，如果对象有一个函数，我们就称它是一个方法。可以认为函数是一段能调用的独立代码，而方法是与一个特定对象关联的行为</p>\n</li>\n<li><p><strong>this</strong>是一个关键字，而不是一个变量</p>\n</li>\n<li><p>如果没有调用一个对象方法，<code>this</code>就是未定义的(<code>undefined</code>)</p>\n</li>\n<li><p>用大括号和逗号分隔的属性所写的对象称为“对象字面量”</p>\n</li>\n<li></li>\n</ol>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"center\">window</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">location</td>\n</tr>\n<tr>\n<td align=\"center\">status</td>\n</tr>\n<tr>\n<td align=\"center\">onload</td>\n</tr>\n<tr>\n<td align=\"center\">document</td>\n</tr>\n<tr>\n<td align=\"center\">alert</td>\n</tr>\n<tr>\n<td align=\"center\">prompt</td>\n</tr>\n<tr>\n<td align=\"center\">open</td>\n</tr>\n<tr>\n<td align=\"center\">close</td>\n</tr>\n<tr>\n<td align=\"center\">setTimeout</td>\n</tr>\n<tr>\n<td align=\"center\">setInterval</td>\n</tr>\n</tbody></table></div></div>\n<ol start=\"14\">\n<li><table>\n<thead>\n<tr>\n<th align=\"center\">元素对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">innerHTML</td>\n</tr>\n<tr>\n<td align=\"center\">childElementCount</td>\n</tr>\n<tr>\n<td align=\"center\">firstChild</td>\n</tr>\n<tr>\n<td align=\"center\">appendChild</td>\n</tr>\n<tr>\n<td align=\"center\">insertBefore</td>\n</tr>\n<tr>\n<td align=\"center\">setAttribute</td>\n</tr>\n<tr>\n<td align=\"center\">getAttribute</td>\n</tr>\n</tbody></table>\n</li>\n<li></li>\n</ol>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"center\">document</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">domain</td>\n</tr>\n<tr>\n<td align=\"center\">title</td>\n</tr>\n<tr>\n<td align=\"center\">URL</td>\n</tr>\n<tr>\n<td align=\"center\">getElementById</td>\n</tr>\n<tr>\n<td align=\"center\">getElementsByTagName</td>\n</tr>\n<tr>\n<td align=\"center\">getElementsByClassName</td>\n</tr>\n<tr>\n<td align=\"center\">createElement</td>\n</tr>\n</tbody></table></div></div>\n<ol start=\"15\">\n<li>传递一个对象作为一个函数的实参时，比如dog,形参会得到这个对象引用的一个副本</li>\n<li>可以使用点记法或[]记法访问对象的属性</li>\n<li>如果使用[]记法，要把属性名作为一个串用引号引起来，例如<code>myObject[&quot;name&quot;]</code></li>\n</ol>\n<h2 id=\"三、实现HTML位置感知——地理地位\">三、实现HTML位置感知——地理地位<a href=\"post/H5学习笔记#三、实现HTML位置感知——地理地位\"></a></h2><ol>\n<li><p>将<strong>度/分/秒转换为小数</strong>，使用下面的函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">degreesToDecimal</span>(<span class=\"params\">degrees, minutes, seconds</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> degrees + (minutes / <span class=\"number\">60.0</span>) + (seconds / <span class=\"number\">3600.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>西经和南纬都用负数值表示</p>\n</li>\n<li><p>API就是带属性和方法的对象</p>\n</li>\n</ol>\n<h2 id=\"四、喜欢社交的应用\">四、喜欢社交的应用<a href=\"post/H5学习笔记#四、喜欢社交的应用\"></a></h2><ol>\n<li><p><code>open</code>只是用一个URL建立一个请求，并告诉这个请求对象要使用哪种请求，以便<code>XMLHttpRequest</code>验证连接，可以使用如下方法：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">request.open(<span class=\"string\">\"GET\"</span>, url);</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>浏览器从远程web服务得到一个回答时，它会调用这个函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (request.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">\"Data received!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n<p>处理程序首先需要检查返回码是否为200或“OK”，然后可以对这个数据做任何处理。</p>\n<ol start=\"3\">\n<li><p>最后一步：需要告诉请求对象去获取数据，为此要使用<code>send</code>方法：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.send(<span class=\"literal\">null</span>); </span><br><span class=\"line\"><span class=\"comment\">//这会把请求发送到服务器。如果不打算向远程服务发送任何数据，就要传入null</span></span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>Level1中没有request.onload属性，所以应当使用onreadystatechange属性</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (request.readyState == <span class=\"number\">4</span> &amp;&amp; request.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n<p>如果<code>readyState</code>为4，可以知道数据已经加载</p>\n<ol start=\"5\">\n<li>浏览器不允许你对原先提供页面的域以外的其他域发出<code>XMLHttpRequest</code>请求</li>\n<li>JSONP是一种使用<code>&lt;script&gt;</code>标记获取JSON对象的方法。这也是一种获取数据的方法（同样的，采用JOSN对象的形式），它可以避免XMLHttpRequest的同源安全问题。</li>\n<li>如果你反复地获取同一个URL（比如我们的JSONP请求就是这样），浏览器为了提高效率会把它缓存起来，所以你会反复地得到同样的缓存文件</li>\n<li>将JSON数据包装在JSONP中的函数调用称为“回调”</li>\n<li>将回调函数指定为JSONP请求中的一个URL查询参数</li>\n</ol>\n<h2 id=\"五、画布\">五、画布<a href=\"post/H5学习笔记#五、画布\"></a></h2><ol>\n<li><p>画布是透明的，利用画布，能够在页面上的任何位置增加图片</p>\n</li>\n<li><p>不要在CSS中缩放画布</p>\n</li>\n<li><p>每个选项列表都会转换为一个数组，各个选项会按顺序放在这个数组中，selectedIndex属性会返回你在下拉菜单中所选选项的编号，使用索引得到数组中的元素，这会返回一个选项对象</p>\n</li>\n<li><p>弧度转换函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">degreesToRadians</span>(<span class=\"params\">degrees</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (degrees * <span class=\"built_in\">Math</span>.PI)/<span class=\"number\">180</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>画布中的所有一切都认为是表现，而不是内容</p>\n</li>\n<li><p>绘制矩形：<code>context.fillRect</code><br>创建矩形轮廓：<code>strokeRect</code><br>使用<code>fillStyle</code>和<code>strokeStyle</code>可以改变默认的填充和笔划颜色，默认颜色为黑色</p>\n</li>\n</ol>\n<h2 id=\"六、Vedio\">六、Vedio<a href=\"post/H5学习笔记#六、Vedio\"></a></h2><ol>\n<li>可以使用<code>addEventListener(DOM2)</code>方法来增加一个事件处理程序</li>\n<li><code>var elementArray = document.querySelectorAll(&quot;selector&quot;)</code></li>\n<li>通过在一个缓冲区中处理一个视频帧，然后把它完全复制到显示画布，可以尽量减少视觉问题</li>\n<li>视频支持播放、暂停、加载、循环和静音方法及属性来直接控制视频的播放</li>\n<li>可以利用<code>ended</code>事件了解视频播放何时结束</li>\n<li>可以使用一个<code>scratch</code>缓冲区，在将视频复制到显示表面之前先对视频进行处理</li>\n<li>可以使用<code>setTimeout</code>处理程序来处理视频帧。尽管没有直接链接到视频的每一帧，但这是目前最好的方法</li>\n</ol>\n<h2 id=\"七、本地存储\">七、本地存储<a href=\"post/H5学习笔记#七、本地存储\"></a></h2><ol>\n<li>一个域的所有页面会看到这个域中其他页面存储的各个数据项。</li>\n<li>每个浏览器会维护它自己的本地存储。如果你在Safari中创建了即时贴，就只能在Safari中看到它们</li>\n</ol>\n<h2 id=\"八、WEB工作线程\">八、WEB工作线程<a href=\"post/H5学习笔记#八、WEB工作线程\"></a></h2><ol>\n<li><p>工作线程生活中一个相当受限的世界中。它们无法访问主浏览器代码能够访问的很多运行时对象，如DOM或主代码中的所有变量或函数</p>\n</li>\n<li><p>工作线程做出的任何修改都不会影响主页面中的对象。工作线程在另一个环境中运行，这与主页面所在的环境不同，所以不能访问主页面所在环境中的对象。工作线程发出的对象也是如此，主页面只能得到工作线程所发送对象的一个副本</p>\n</li>\n<li><p>工作线程可以访问<code>localStorage</code>，也可以做出<code>XMLHttpRequest</code>请求</p>\n</li>\n<li><p>Web工作线程有一个全局函数，名为importScripts，可以使用这个函数向工作线程导入一个或多个JavaScript文件。使用importScripts时，要向它提供你想导入的文件后URL的一个列表（各个URL之间用逗号分割），如下：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importScripts(<span class=\"string\">\"http://bigscience.org/nuclear.js\"</span>, <span class=\"string\">\"http://nasa.gov/rocket.js\"</span>, <span class=\"string\">\"mylibs/atomsmasher.js\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>调用importScripts时，会按顺序获取和执行各个JavaScript URL<br>注意importScripts是一个“货真价实”的函数，所以（不同于很多语言中的import语句），可以在运行时决定如何导入，如下：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (taskType == <span class=\"string\">\"songdetection\"</span>) &#123;</span><br><span class=\"line\">importScripts(<span class=\"string\">\"audio.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure></li>\n</ol>\n","next":{"title":"方案","link":"post/方案"},"plink":"http://ZhongJinMing.github.io/post/H5学习笔记/","toc":[{"title":"一、语法","id":"一、语法","index":"1"},{"title":"二、Javascript函数和对象","id":"二、Javascript函数和对象","index":"2"},{"title":"三、实现HTML位置感知——地理地位","id":"三、实现HTML位置感知——地理地位","index":"3"},{"title":"四、喜欢社交的应用","id":"四、喜欢社交的应用","index":"4"},{"title":"五、画布","id":"五、画布","index":"5"},{"title":"六、Vedio","id":"六、Vedio","index":"6"},{"title":"七、本地存储","id":"七、本地存储","index":"7"},{"title":"八、WEB工作线程","id":"八、WEB工作线程","index":"8"}]}